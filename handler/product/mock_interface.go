// Code generated by MockGen. DO NOT EDIT.
// Source: handler/product/interface.go

// Package product is a generated GoMock package.
package product

import (
	model "practice6/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProSvcInf is a mock of ProSvcInf interface.
type MockProSvcInf struct {
	ctrl     *gomock.Controller
	recorder *MockProSvcInfMockRecorder
}

// MockProSvcInfMockRecorder is the mock recorder for MockProSvcInf.
type MockProSvcInfMockRecorder struct {
	mock *MockProSvcInf
}

// NewMockProSvcInf creates a new mock instance.
func NewMockProSvcInf(ctrl *gomock.Controller) *MockProSvcInf {
	mock := &MockProSvcInf{ctrl: ctrl}
	mock.recorder = &MockProSvcInfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProSvcInf) EXPECT() *MockProSvcInfMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProSvcInf) Create(arg0 *model.Product) (*model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockProSvcInfMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProSvcInf)(nil).Create), arg0)
}
